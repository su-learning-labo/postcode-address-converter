name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy-xserver:
    name: Deploy to Xserver
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Debug Secrets (一時的)
      run: |
        echo "SSH_HOST length: ${#SSH_HOST}"
        echo "SSH_USERNAME length: ${#SSH_USERNAME}"
        echo "SSH_PATH length: ${#SSH_PATH}"
        echo "SSH_PORT: $SSH_PORT"
        echo "SSH_PRIVATE_KEY length: ${#SSH_PRIVATE_KEY}"
        # 実際の値は表示されませんが、長さで空でないか確認可能
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SSH_PATH: ${{ secrets.SSH_PATH }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # SSH接続テスト
        ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH接続成功'" || true
        # known_hostsに追加
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true
        
    - name: Deploy to Xserver
      run: |
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT || 22 }} -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.github' \
          --exclude='*.md' \
          --exclude='.eslintrc.json' \
          --exclude='.prettierrc' \
          --exclude='vitest.config.js' \
          --exclude='package.json' \
          --exclude='package-lock.json' \
          ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}
        
    - name: Set file permissions
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT || 22 }} -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
          "chmod -R 755 ${{ secrets.SSH_PATH }}"
        
    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "Application URL: https://apps.i-iide.com/postcode-address-converter"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
